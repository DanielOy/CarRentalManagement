@page "/models/"
@inject IHttpRepository<Model> client
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize]

<HeadingComponent Text="Models" />
<br />

<a href="/models/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Car Model
</a>
<br />
<br />

@if (models == null)
{
    <div class="alert alert-info">Loading Models...</div>
}
else
{
    <table class="table" id="modelsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in models)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(model.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Model> models;

    protected async override Task OnInitializedAsync()
    {
        models = await this.client.GetAll(EndPoints.ModelsEndPoint);
    }

    async Task Delete(int modelId)
    {
        var model = models.First(x => x.Id == modelId);
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}?");
        if (confirm)
        {
            await client.Delete(EndPoints.ModelsEndPoint, model.Id);
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#modelsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#modelsTable");
    }
}
